---
layout: post
title: 关于证书和SSL
date: 2019-12-12 08:56:49
tags: SSL 证书 CA
category: HTTPS
---
### 证书的作用

证书的作用是对通信身份的认证，避免发生中间人攻击。

### 信任链

信任是可传递的，如果A信任B，而B又信任C，那么A也可以信任C。

1. 用户信任浏览器。
2. 各大浏览器厂商信任通过了 WebTrust 国际安全审计的各大 CA 机构的根证书，并且将根证书内置到浏览器之中。
3. 通过内置的根证书对网站下发的证书进行签名校验，如果签名校验通过，则认为内置的证书信任网站下发的证书。

通过浏览器厂商、CA 机构和各种加解密算法，完成了信任的传递。

### Catificate Authority(CA)

任何个体/组织都可以扮演 CA 的角色，只不过难以得到客户端的信任，能够受浏览器默认信任的 CA 大厂商有很多，其中 TOP5 是 Symantec、Comodo、Godaddy、GolbalSign 和 Digicert。
根据证书签发流程的严格程度，证书分为三类：DV(Domain Validation),OV(Organization Validation),EV(Extended Validation),DV 面向个人用户通过邮件就能完成验证；OV 面向企业客户除了要通过 DV 证书的验证流程，还需要公司的授权，CA 通过拨打信息库中公司的电话来确认；通过了 EV 认证的网站会在证书上展示公司信息，这类授信除了要完成 DV 和 OV 的验证外，还需要公司提供金融机构的开户许可证，要求十分严格。

#### key pem der csr crt 是什么

1. .key：秘钥，通常是指非对称加密的私钥。可由 Openssl 套件根据不同的非对称加密算法（RSA, DSA, EC）来生成。可能是 der 或 pem 编码。

```
// 生成2048位RSA秘钥，private.pem 为私钥，公钥可由私钥导出
openssl genrsa  -out private.key 2048
// 导出公钥，默认为PKCS#8结构
openssl rsa -in private.key -outform PEM -pubout -out public.pub
```

2. .der(Distinguished Encoding Rules)：可辨别编码规则是ASN.1的一种。ASN.1(Abstract Syntax Notation One)抽象语法标记，ASN.1是一种 ISO/ITU-T 标准，描述了一种对数据进行表示、编码、传输和解码的数据格式,它提供了一整套正规的格式用于描述对象的结构。

3. .pem(Privacy Enhanced Mail)：内容通过Base61编码后的文本文件，通常以"-----BEGIN"和"-----END"开头结尾。PKCS#1是针对RSA设计的结构，而新的PKCS#8结构不仅仅可以支持RSA秘钥。

```
// PKCS#1 的格式
-----BEGIN RSA PUBLIC KEY-----
BASE64 ENCODED DATA
-----END RSA PUBLIC KEY-----

// PKCS#8 的个数
-----BEGIN PUBLIC KEY-----
BASE64 ENCODED DATA
-----END PUBLIC KEY-----
```

4. csr(Certificate Signing Request)：证书签名请求。它包含了公钥和域名信息，由申请证书方提供，提交到CA机构，CA验证申请者身份后对其签名，签名后的csr就是证书了。可能是 der 或 pem 编码。

```
// 生成csr请求，根据提示填写好相关信息，参数 private.pem 是服务器的私钥
openssl req -new -key private.pem -out server.csr

// csr 的格式，可见也是pem格式。
-----BEGIN CERTIFICATE REQUEST-----
BASE64 ENCODED DATA
-----END CERTIFICATE REQUEST-----
```

5. .crt 即证书。通常是X509v3 格式的证书，csr 在 CA 机构完成签名后就是crt，包含了申请者的公钥和申请者的相关信息，能是 der 或 pem 编码。

```
// 不通过CA机构，也可通过自签发的方式生成crt，-CAkey为自己作为CA的私钥，-CA为自己作为CA的证书
openssl x509 -req -days 3650 -in server.csr -CA ca.crt -CAkey server.key -CAcreateserial -out server.crt
```

#### 证书链

CA 机构为了根证书私钥的绝对安全，通常不会直接使用根证书和私钥，而是使用根证书签发的中间证书去签名客户证书，这样就会把根证书和私钥隔离开来。所以客户证书的签名验证就变成了需要中间证书的验证，而中间证书又由根证书验证。在实际使用中，配置证书，需要配置完整的证书链。

### 证书的签名和验证

上文说到证书是由签名的csr，而csr中包含了申请者的相关信息，签名就是对这些信息的确认，使得这些信息无法伪造和篡改。

#### 签名

1. 利用摘要算法，对 csr 进行摘要计算，得到摘要。

2. 利用 CA 中间证书的私钥，对摘要进行加密，得到签名。

3. 将签名附在csr中得到证书。

#### 验证签名

1. 通过 CA 的中间证书里的公钥，对签名进行解密，得到摘要。

2. 通过摘要算法，对证书的信息进行摘要计算。

3. 比对解密出来的摘要和计算出来的摘要是否相同，相同则验证签名通过。


#### 为什么要内置根证书

从上述流程可以看出，解密签名公钥的合法性至关重要，如果解密签名公钥被攻击者替换，那么整个安全体系将不复存在，因此，需要通过内置 CA 根证书的方式来保证验签公钥的合法性。

### 安全的通讯 —— SSL

证书的存在是为了完成安全的通讯，这里的安全是指攻击者可以监听甚至篡改通讯内容的情况下，保证通讯双发的内容不被窃取和伪造。

上文全部篇幅都在介绍证书，其最大的目的就在于如何不被欺骗的拿到网站证书中的公钥，和这个公钥配对的私钥存储在网站服务器上，所以安全的通讯流程就变成了：

1. 在通过验证的网站证书里获取公钥和域名，比对浏览器地址栏的域名是否匹配，匹配则浏览器显示一把小锁。
2. 浏览器在与服务器建立通讯之后，会生成一对对称加密的秘钥，通过证书上的公钥和非对称加密算法，将这对对称秘钥加密，并发送给服务器。
3. 服务器在收到密文后，利用自己的私钥进行解密拿到对称秘钥，至此，服务器和浏览器完成对称秘钥分发。
4. 后续通讯过程均使用该对称秘钥加解密。

### 为什么 SSL 是安全的

#### 机密性

1. 攻击者无法获取信息明文，因为明文经过对称加密算法加密，获取明文必须获取对称秘钥。
2. 攻击者无法获取对称秘钥，因为对称秘钥通过公钥加密，获取对称秘钥必须获取私钥。
3. 攻击者无法获取私钥，因为私钥存储在用户服务器中，不参与传输。

#### 认证性

1. 通过域名劫持，攻击者可以将用户导向非法服务器。
2. 由于非法服务器没有合法服务器的私钥，攻击者必须下发伪造证书，来欺骗用户用伪造的公钥加密对称秘钥。
3. 伪造证书验证签名失败。

#### 完整性

借助消息认证码(MAC)保障数据完整性，防止消息篡改

#### 重放保护

通过使用隐式序列号防止重放攻击


所以在保证服务器私钥安全和终端安全的情况下SSL通讯是安全的。

